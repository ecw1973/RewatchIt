@page "/browse"
@using Radzen.Blazor
@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@inject TmdbService MovieService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Movies</h1>

<div class="search_wrapper">
    <div class="row">
        <div class="col-sm-2">
            <SfDropDownList TItem="int" TValue="int" @bind-Value="@SelectedYear" DataSource="@Years" PopupHeight="230px" Placeholder="Select a year">
            </SfDropDownList>
        </div>

        <div class="col-sm-3">
            <SfButton @onclick="ExecuteQuery">Query</SfButton>
        </div>
    </div>
</div>

<div class="row">
    <SfGrid @ref="movieGrid" DataSource="@tmdbMovieList" EnableHover="false" AllowPaging="true" AllowSelection="false" EnableVirtualization="false">
        <GridPageSettings PageSize="5" PageSizes="PageSizes"></GridPageSettings>
        <GridColumns>
            <GridColumn Field=@nameof(TmdbMovie.Title) HeaderText="Poster" TextAlign="TextAlign.Center" Width="100">
                <Template>
                    @{
                        TmdbMovie selectedMovie = (TmdbMovie)context;

                        <div class="poster_container">
                            <img src="@selectedMovie.PosterUrl" class="image" @onclick="() => ShowDetails(selectedMovie.Id, selectedMovie.Title)">
                        </div>

                        @*<div class="posterThumb">
                                <img class="image" src="@selectedMovie.PosterUrl" @onclick="() => ShowDetails(selectedMovie.Id, selectedMovie.Title)">
                        </div>*@
                    }
                </Template>
            </GridColumn>
            <GridColumn Field=@nameof(TmdbMovie.Title) HeaderText="Movie Title" Width="150"></GridColumn>
            <GridColumn Field=@nameof(TmdbMovie.ReleaseDate) Format="d" HeaderText="Release Date" Width="40"></GridColumn>
            <GridColumn Field="@nameof(TmdbMovie.ReleaseDate)" HeaderText="Rating" TextAlign="TextAlign.Center" Width="100">
                <Template>
                    @{
                        using ApplicationDbContext dbContext = DbContextFactory.CreateDbContext();
                        TmdbMovie selectedMovie = (TmdbMovie)context;
                        WatchedMovie watchedMovie = dbContext.Movies.FirstOrDefault(x => x.MovieId == selectedMovie.Id && x.Username == currentUser);
                        if (watchedMovie == null)
                        {
                            <RadzenRating Stars="5" Value="0" Change=@(args => OnRatingChange(selectedMovie, args)) />
                        }
                        else
                        {
                            dbContext.Entry(watchedMovie).State = EntityState.Detached;
                            <RadzenRating Stars="5" Value="@watchedMovie.UserRating" Change=@(args => OnRatingChange(selectedMovie, args)) />
                        }

                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>

<style>

    .search_wrapper {
        horiz-align: left;
        padding-bottom: 50px;
        padding-left: 0;
        padding-top: 50px;
    }

    .poster_container {
        position: relative;
        width: 50%;
    }

    .poster_container .image {
        backface-visibility: hidden;
        cursor: pointer;
        display: block;
        height: auto;
        opacity: 1;
        transition: .5s ease;
        width: 100%;
    }

    .poster_container:hover .image {
        transform: scale(1.10)
    }
    
    </style

@{
    if (IsMovieDetailsDialogVisible)
    {
        <SfDialog @bind-Visible="@IsMovieDetailsDialogVisible" AllowDragging="true" IsModal="true" Width="640px" Height="550px" ShowCloseIcon="true">
            <DialogTemplates>
                <Content>
                    <TmdbMovieCard MovieId="@SelectedMovieId" />
                </Content>
            </DialogTemplates>
            <DialogAnimationSettings Effect="@DialogEffect.Zoom"></DialogAnimationSettings>
        </SfDialog>
    }
}

@code
{

     protected override async Task OnAfterRenderAsync(bool firstRender)
     {
         AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
         ClaimsPrincipal user = authState.User;
         currentUser = "None";
         if (user.Identity != null && user.Identity.IsAuthenticated)
         {
             currentUser = user.Identity.Name;
         }
     }

    private List<int> Years
    {
        get
        {
            List<int> years = new List<int>();
            for (int i = 1970; i < 2022; i++)
            {
                years.Add(i);
            }
            return years;
        }
    }

    readonly List<TmdbMovie> tmdbMovieList = new List<TmdbMovie>();
    SfGrid<TmdbMovie> movieGrid;
     private int selectedYear = 2021;
     private string currentUser = "None";

     private bool IsMovieDetailsDialogVisible { get; set; }
     private int SelectedMovieId { get; set; }
     private string SelectedMovieTitle { get; set; }

     private async void ExecuteQuery()
    {
        await movieGrid.GoToPage(1);
        tmdbMovieList.Clear();
        movieGrid.Refresh();

        int moviePageCount = await MovieService.GetMoviePageCount(SelectedYear);
        if (moviePageCount > 25)
        {
            moviePageCount = 25;
        }

        for (int page = 1; page <= moviePageCount; page++)
        {
            List<TmdbMovie> result = await MovieService.GetMovies(page, SelectedYear);
            tmdbMovieList.AddRange(result);

            if (movieGrid.PageSettings.CurrentPage == page)
            {
                movieGrid.Refresh();
            }
            
        }
    }

    void ShowDetails(int movieId, string movieTitle)
    {
        SelectedMovieId = movieId;
        SelectedMovieTitle = movieTitle;
        IsMovieDetailsDialogVisible = true;
    }

    public int SelectedYear
    {
        get => selectedYear;
        set
        {
            selectedYear = value;
            ExecuteQuery();
        }
    }

    public object PageSizes => new List<int> { 5, 10, 15, 20 };

    private async void OnRatingChange(TmdbMovie movie, int rating)
    {
        await using ApplicationDbContext dbContext = DbContextFactory.CreateDbContext();

        WatchedMovie watchedMovie = await dbContext.Movies.FirstOrDefaultAsync(x => x.MovieId == movie.Id & x.Username == currentUser);

        if (watchedMovie is null)
        {
            dbContext.Add(new WatchedMovie { MovieId = movie.Id, MovieTitle = movie.Title, UserRating = rating , Username = currentUser});
        }
        else
        {
            watchedMovie.UserRating = rating;
        }

        await dbContext.SaveChangesAsync();
    }

}

